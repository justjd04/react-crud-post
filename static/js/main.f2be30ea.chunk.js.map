{"version":3,"sources":["App.js","index.js"],"names":["App","titleRef","useRef","contentRef","useState","Data","data","setData","title","setTitle","content","setContent","updateID","setUpdateID","updateTitle","setUpdateTitle","updateContent","setUpdateContent","useEffect","current","value","saveJson","posts","axios","post","then","response","className","placeholder","onChange","e","target","ref","onClick","newPost","uuidv1","editedPost","filterPost","filter","OBJ","id","map","key","populatePost","filterOutPost","deletePost","jsonDate","fileData","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","download","href","click","saveData","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2be30ea.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Data from \"./data.json\";\nimport { v1 as uuidv1 } from 'uuid';\nimport axios from 'axios';\n\nfunction App() {\n\n  // Reference\n  const titleRef = useRef();\n  const contentRef = useRef();\n\n  // State \n  const [data, setData] = useState(Data);\n\n  // Temp State\n  const [title, setTitle] = useState();\n  const [content, setContent] = useState();\n\n  const [updateID, setUpdateID] = useState();\n  const [updateTitle, setUpdateTitle] = useState();\n  const [updateContent, setUpdateContent] = useState();\n\n  // Effect\n  //////////////////////////////////////////\n  useEffect(() => {\n    // console.log(data);\n    // setDate(Data)\n    // clear form fields\n    titleRef.current.value = null;\n    contentRef.current.value = null;\n  },[data]);\n  \n\n\n  // Add Post\n  //////////////////////////////////////////\n  const addPost = () => {\n    if(title && content) {\n      // create new post object\n      let newPost = {\n        \"id\": uuidv1(),\n        \"title\": title,\n        \"content\": content\n      }\n      // merge new post with copy of old state\n      let posts = [...data, newPost];\n      // push new object to state\n      setData(posts);\n      // clear title and content from state\n      setTitle();\n      setContent();\n\n      // update write to json file\n      saveJson(posts);\n\n   }\n  }\n  \n\n\n  // Delete Post \n  //////////////////////////////////////////\n  const deletePost = (key) => {\n    // filter out post containing that id\n    let filterOutPost = [...data].filter(OBJ=>OBJ.id!==key);\n    // save the rest in state\n    setData(filterOutPost);\n\n    // update write to json file\n    saveJson(filterOutPost);\n\n  }\n\n  // Populate Post\n  ////////////////////////////////////////// \n  const populatePost = (key, title, content) => {\n    setUpdateID(key);\n    setUpdateTitle(title);\n    setUpdateContent(content);\n  }\n\n  // Update Post \n  //////////////////////////////////////////\n  const updatePost = () => {\n    // populate post info from temp state and prepare new object for changed post\n    let editedPost = {\n      \"id\": updateID,\n      \"title\": updateTitle,\n      \"content\": updateContent\n    }\n    // remove old post with same ID and get the remaining data /// filter \n    let filterPost = [...data].filter(OBJ=>OBJ.id!==updateID);\n    // prepare object with edited post + remaining data from object above\n    let posts = [...filterPost, editedPost];\n    // push int state\n    setData(posts);\n\n    setUpdateID();\n    setUpdateTitle();\n    setUpdateContent();\n\n    // update write to json file\n    saveJson(posts);\n\n  }\n\n  // Write to JSON File\n  //////////////////////////////////////////\n  // this function will receive all uodated state / posts after you add, edit delete post\n  const saveJson = (posts) => {\n    // api URL // end point from node server / express server\n    const url = 'http://localhost:5000/write'\n    axios.post(url, posts)\n    .then(response => {\n      // console.log(response);\n    });\n  }\n\n  // Bonus Section\n  //////////////////////////////////////////\n  // Downloading JSON File\n  const saveData = jsonDate => {\n    const fileData = JSON.stringify(jsonDate);\n\n    const blob = new Blob([fileData], {type: \"text/plain\"});\n    const url = URL.createObjectURL(blob);\n    // create link\n    const link = document.createElement('a');\n    // point link to file to be downloaded\n    link.download = 'newData.json';\n    link.href = url;\n    // trigger download\n    link.click();\n  }\n\n\n\n  return (\n    <div className=\"App\">\n\n      <div>\n        <h4>Add New Post</h4>\n        <input placeholder=\"Title\" \n          onChange={ e => setTitle( e.target.value ) } \n          value={ title || '' } \n          ref={ titleRef }\n        />\n        <br />\n        <textarea \n          placeholder=\"Content\"\n          onChange={ e => setContent( e.target.value ) } \n          value={ content || '' } \n          ref={ contentRef }\n        ></textarea>\n        <br />\n        <button onClick={ addPost }>Add Post</button>\n      </div>\n\n      {/* If temp state has got values of title and content for update form show this */}\n\n      { updateTitle || updateContent ? \n        (\n          <div>\n            <h4>Update Post</h4>\n            <input placeholder=\"Title\" \n              onChange={ e => setUpdateTitle( e.target.value ) } \n              value={ updateTitle || '' } \n            />\n            <br />\n            <textarea\n              placeholder=\"Content\"\n              onChange={ e => setUpdateContent( e.target.value ) } \n              value={ updateContent || '' } \n            ></textarea>\n            <br />\n            <button onClick={ updatePost }>Update Post</button>\n          </div>\n        ) : null }\n\n      <div className=\"posts\">\n        { data ? data.map(post => {\n          return(\n            <div key={ post.id } className=\"post\">\n              <h3>{ post.title }</h3>\n              <p>{ post.content }</p>\n              <button onClick={ () => populatePost(post.id, post.title, post.content) }>Edit</button>\n              <button onClick={ () => deletePost(post.id) }>Delete</button>\n            </div>\n          )\n        }) : null }\n        <div className=\"btn-download\">\n          <button onClick={ e => saveData(data) }>Download Data</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}